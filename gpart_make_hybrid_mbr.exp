#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Fri Nov 11 21:59:06 2016
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn gdisk /dev/sdc
match_max 100000
expect -exact "GPT fdisk (gdisk) version 1.0.1\r
\r
Partition table scan:\r
  MBR: protective\r
  BSD: not present\r
  APM: not present\r
  GPT: present\r
\r
Found valid GPT with protective MBR; using GPT.\r
\r
Command (? for help): "
send -- "r\r"
expect -exact "r\r
\r
Recovery/transformation command (? for help): "
send -- "h\r"
expect -exact "h\r
\r
WARNING! Hybrid MBRs are flaky and dangerous! If you decide not to use one,\r
just hit the Enter key at the below prompt and your MBR partition table will\r
be untouched.\r
\r
Type from one to three GPT partition numbers, separated by spaces, to be\r
added to the hybrid MBR, in sequence: "
send -- "1 2 3\r"
expect -exact "1 2 3\r
Place EFI GPT (0xEE) partition first in MBR (good for GRUB)? (Y/N): "
send -- "N\r"
expect -exact "N\r
\r
Creating entry for GPT partition #1 (MBR partition #1)\r
Enter an MBR hex code (default EF): "
send -- "\r"
expect -exact "\r
Set the bootable flag? (Y/N): "
send -- "N\r"
expect -exact "N\r
\r
Creating entry for GPT partition #2 (MBR partition #2)\r
Enter an MBR hex code (default EF): "
send -- "\r"
expect -exact "\r
Set the bootable flag? (Y/N): "
send -- "N\r"
expect -exact "N\r
\r
Creating entry for GPT partition #3 (MBR partition #3)\r
Enter an MBR hex code (default 83): "
send -- "\r"
expect -exact "\r
Set the bootable flag? (Y/N): "
send -- "Y\r"
expect -exact "Y\r
\r
Recovery/transformation command (? for help): "
send -- "x\r"
expect -exact "x\r
\r
Expert command (? for help): "
send -- "h\r"
expect -exact "h\r
\r
Expert command (? for help): "
send -- "w\r"
expect -exact "w\r
\r
Final checks complete. About to write GPT data. THIS WILL OVERWRITE EXISTING\r
PARTITIONS!!\r
\r
Do you want to proceed? (Y/N): "
send -- "Y\r"
expect eof
